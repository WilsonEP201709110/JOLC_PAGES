/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,4],$V2=[1,24],$V3=[1,25],$V4=[1,28],$V5=[1,40],$V6=[1,41],$V7=[1,42],$V8=[1,43],$V9=[1,44],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,37],$Vj=[1,38],$Vk=[1,39],$Vl=[2,5,7,27,28,30,34,35,36,37,38,39,42,45,46,47,50,52,55,59,63,64,65,66,71],$Vm=[1,52],$Vn=[1,55],$Vo=[1,56],$Vp=[1,61],$Vq=[1,77],$Vr=[1,76],$Vs=[1,69],$Vt=[1,86],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[30,67,73],$VI=[1,88],$VJ=[1,89],$VK=[1,120],$VL=[1,111],$VM=[1,112],$VN=[1,119],$VO=[1,118],$VP=[1,113],$VQ=[1,114],$VR=[1,115],$VS=[1,116],$VT=[1,117],$VU=[1,121],$VV=[1,122],$VW=[1,123],$VX=[31,33,41,50,53,56,57,60,68,72,73,77,78,79,80,81,82,83,84],$VY=[2,5,7,27,28,30,34,35,36,37,38,39,40,42,45,46,47,50,52,55,57,59,63,64,65,66,71,72,82,85,86,87,88,89,90,91,92,93,94,95,96],$VZ=[1,145],$V_=[41,60],$V$=[2,5,7,27,28,30,34,35,36,37,38,39,41,42,45,46,47,50,52,55,59,63,64,65,66,71],$V01=[1,193],$V11=[31,33,41,50,53,56,57,60,68,72,73,81,82,83,84],$V21=[31,33,41,50,53,56,57,60,68,72,73,77,78,80,81,82,83,84],$V31=[31,33,41,50,53,60,68,72,73,81,82,83,84],$V41=[1,238],$V51=[1,240],$V61=[31,33,41,50,53,60,68,81,82,83,84],$V71=[50,52,66],$V81=[50,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"Instrucciones":4,"EOF":5,"instruccion":6,"EXEC":7,"Llamada_void":8,"var_declaracion":9,"var_asignacion":10,"funcprint":11,"sentif":12,"sentwhile":13,"sentdowhile":14,"sentswitch":15,"sentfor":16,"declarFuncion":17,"palbreak":18,"palcontinuar":19,"palreturn":20,"declavector":21,"modifivector":22,"declalista":23,"agregaralista":24,"modifilista":25,"incre_decre":26,"COMENTARIOL":27,"COMENTARIOMULTI":28,"var_tipo":29,"IDENTIFICADOR":30,"IGUAL":31,"expresion":32,"PTCOMA":33,"TINT":34,"TDOUBLE":35,"TCHAR":36,"TBOOLEAN":37,"TSTRING":38,"RIMPRIMIR":39,"PARIZQ":40,"PARDER":41,"SIF":42,"conj_sentencias":43,"SELSE":44,"SWHILE":45,"SDO":46,"SSWITCH":47,"LLAIZQ":48,"lista_tipocaso":49,"LLADER":50,"tipocaso":51,"PCASE":52,"DOSPUNTOS":53,"paldefault":54,"SFOR":55,"MAS":56,"MENOS":57,"lista_parametros":58,"TVOID":59,"COMA":60,"llamadaFuncion":61,"parametros_llamada":62,"PBREAK":63,"PCONTINUE":64,"PRETURN":65,"PDEFAULT":66,"CORIZQ":67,"CORDER":68,"PNEW":69,"list_expresiones":70,"TLISTA":71,"MENOR":72,"MAYOR":73,"MTOCHARARRAY":74,"PUNTO":75,"PADD":76,"MULTIPLICAR":77,"DIVIDIR":78,"POTENCIA":79,"MODULO":80,"INTERROGACION":81,"NOT":82,"AND":83,"OR":84,"ENTERO":85,"DECIMAL":86,"CADENA":87,"BOOLEANO":88,"CARACTER":89,"MTOLOWER":90,"MTOUPPER":91,"MLENGTH":92,"MTRUNCATE":93,"MROUND":94,"MTYPEOF":95,"MTOSTRING":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"EXEC",27:"COMENTARIOL",28:"COMENTARIOMULTI",30:"IDENTIFICADOR",31:"IGUAL",33:"PTCOMA",34:"TINT",35:"TDOUBLE",36:"TCHAR",37:"TBOOLEAN",38:"TSTRING",39:"RIMPRIMIR",40:"PARIZQ",41:"PARDER",42:"SIF",44:"SELSE",45:"SWHILE",46:"SDO",47:"SSWITCH",48:"LLAIZQ",50:"LLADER",52:"PCASE",53:"DOSPUNTOS",55:"SFOR",56:"MAS",57:"MENOS",59:"TVOID",60:"COMA",63:"PBREAK",64:"PCONTINUE",65:"PRETURN",66:"PDEFAULT",67:"CORIZQ",68:"CORDER",69:"PNEW",71:"TLISTA",72:"MENOR",73:"MAYOR",74:"MTOCHARARRAY",75:"PUNTO",76:"PADD",77:"MULTIPLICAR",78:"DIVIDIR",79:"POTENCIA",80:"MODULO",81:"INTERROGACION",82:"NOT",83:"AND",84:"OR",85:"ENTERO",86:"DECIMAL",87:"CADENA",88:"BOOLEANO",89:"CARACTER",90:"MTOLOWER",91:"MTOUPPER",92:"MLENGTH",93:"MTRUNCATE",94:"MROUND",95:"MTYPEOF",96:"MTOSTRING"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[9,5],[9,3],[10,4],[29,1],[29,1],[29,1],[29,1],[29,1],[11,5],[12,5],[12,7],[12,7],[13,5],[14,7],[15,7],[49,2],[49,1],[51,4],[51,3],[16,8],[26,3],[26,3],[26,4],[26,4],[17,6],[17,6],[17,5],[17,5],[58,4],[58,2],[61,4],[61,3],[8,5],[8,4],[62,3],[62,1],[18,2],[19,2],[20,2],[20,3],[54,1],[43,3],[21,11],[21,9],[70,3],[70,1],[22,7],[23,12],[23,11],[24,7],[25,9],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,5],[32,2],[32,3],[32,3],[32,4],[32,4],[32,4],[32,4],[32,3],[32,3],[32,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,3],[32,1],[32,4],[32,6],[32,1],[32,4],[32,4],[32,4],[32,4],[32,4],[32,4],[32,4],[32,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]);
break;
case 3:
this.$ = [$$[$0]];
break;
case 4:
this.$ = $$[$0];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 104:
 this.$ = $$[$0];
break;
case 24: case 25:
 this.$ = new ExcepcionComent.default();
break;
case 26:
this.$ = new Excepcion.default("Sintactico ",'[ '+yytext+' ] - patron no reconocido ', this._$.first_line,this._$.first_column);
break;
case 27:
 this.$ = new varDeclaracion.default($$[$0-4],$$[$0-3],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-1]);
break;
case 28:
 this.$ = new varDeclaracion.default($$[$0-2],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 29:
 this.$ = new varAsignacion.default($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1]);
break;
case 30:
 this.$ = new Tipo.default(Tipo.tipos.ENTERO);
break;
case 31:
 this.$ = new Tipo.default(Tipo.tipos.DECIMAL);
break;
case 32:
 this.$ = new Tipo.default(Tipo.tipos.CARACTER);
break;
case 33:
 this.$ = new Tipo.default(Tipo.tipos.BOOLEANO);
break;
case 34:
 this.$ = new Tipo.default(Tipo.tipos.CADENA)
break;
case 35:
this.$ = new Imprimir.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 36:
 this.$ = new Si.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0]);
break;
case 37:
 this.$ = new Si.default($$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-2],$$[$0]);
break;
case 38:
 this.$ = new Si.default($$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column,$$[$0-2],null,$$[$0]);
break;
case 39:
 this.$ = new cicloWhile.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 40:
 this.$ = new cicloDoWhile.default($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 41:
this.$ = new CSwitch.default($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 42:
 $$[$0-1].push($$[$0]);
break;
case 43: case 62: case 72:
 this.$ = [$$[$0]];
break;
case 44:
 this.$ = new Icase.default($$[$0-2],$$[$0],false,_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 45:
 this.$ = new Icase.default($$[$0-2],$$[$0],true,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 46:
 this.$ = new Por.default($$[$0-4],$$[$0-5],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 47:
 this.$ = new IncrementoDecremento.default($$[$0-2],true,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 48:
 this.$ = new IncrementoDecremento.default($$[$0-2],false,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 49:
 this.$ = new IncrementoDecremento.default($$[$0-3],true,_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 50:
 this.$ = new IncrementoDecremento.default($$[$0-3],false,_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 51:
 this.$ = new Declaracion_funcion.default($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 52:
this.$ = new Declaracion_void.default(new Tipo.default(Tipo.tipos.VOID),$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 53:
 this.$ = new Declaracion_funcion.default($$[$0-4],$$[$0-3],null,$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 54:
this.$ = new Declaracion_void.default(new Tipo.default(Tipo.tipos.VOID),$$[$0-3],null,$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 55:
 $$[$0-3].push(new varDeclaracion.default($$[$0-1],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column));
break;
case 56:
 this.$ = [new varDeclaracion.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column)];
break;
case 57:
this.$ = new Llamada_Funcion.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 58:
this.$ = new Llamada_Funcion.default($$[$0-2],null,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 59:
this.$ = new Llamada_void.default($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 60:
this.$ = new Llamada_void.default($$[$0-3],null,_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 61: case 71:
 $$[$0-2].push($$[$0]);
break;
case 63:
 this.$ = new Detener.default();
break;
case 64:
 this.$ = new Continuar.default();
break;
case 65:
this.$ = new Retornar.default(true,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 66:
this.$ = new Retornar.default(true,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-1]);
break;
case 67:
this.$ = new Defecto.default();
break;
case 68:
 this.$ = $$[$0-1];
break;
case 69:
 this.$ = new Vector.default($$[$0-10],$$[$0-10],$$[$0-4],$$[$0-7],$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 70:
 this.$ = new Vector2.default($$[$0-8],$$[$0-5],$$[$0-2],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 73:
this.$ = new Modificacion_Vector.default($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 74:
this.$ = new Declaracion_Lista.default($$[$0-9],$$[$0-9],$$[$0-2],$$[$0-7],_$[$0-11].first_line,_$[$0-11].first_column);
break;
case 75:
this.$ = new Lista_toChayArray.default(new Tipo.default(Tipo.tipos.CARACTER),$$[$0-2],$$[$0-6],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 76:
this.$ = new Agregar_aLista.default($$[$0-6],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 77:
this.$ = new Modificacion_Lista.default($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 78:
this.$ = new Aritmetica.default($$[$0-2],$$[$0],Aritmetica.OperadorArit.SUMA,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 79:
this.$ = new Aritmetica.default($$[$0-2],$$[$0],Aritmetica.OperadorArit.MENOS,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 80:
this.$ = new Aritmetica.default($$[$0-2],$$[$0],Aritmetica.OperadorArit.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 81:
this.$ = new Aritmetica.default($$[$0-2],$$[$0],Aritmetica.OperadorArit.DIVICION,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 82:
this.$ = new Aritmetica.default($$[$0-2],$$[$0],Aritmetica.OperadorArit.POTENCIA,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 83:
this.$ = new Aritmetica.default($$[$0-2],$$[$0],Aritmetica.OperadorArit.MODULO,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 84:
this.$= new Ternario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 85:
this.$ = new Aritmetica.default($$[$0],$$[$0],Aritmetica.OperadorArit.MENOSUNARIO,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0])
break;
case 86:
this.$ = new Relacional.default($$[$0-2],$$[$0],Relacional.OperadorRela.MAYORQUE,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 87:
this.$ = new Relacional.default($$[$0-2],$$[$0],Relacional.OperadorRela.MENORQUE,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 88:
this.$ = new Relacional.default($$[$0-3],$$[$0],Relacional.OperadorRela.MAYORIGUAL,_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 89:
this.$ = new Relacional.default($$[$0-3],$$[$0],Relacional.OperadorRela.MENORIGUAL,_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 90:
this.$ = new Relacional.default($$[$0-3],$$[$0],Relacional.OperadorRela.IGUALIGUAL,_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 91:
this.$ = new Relacional.default($$[$0-3],$$[$0],Relacional.OperadorRela.DIFERENTE,_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 92:
this.$ = new Logica.default($$[$0-2],$$[$0],Logica.OperadorLogic.AND,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 93:
this.$ = new Logica.default($$[$0-2],$$[$0],Logica.OperadorLogic.OR,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 94:
this.$ = new Logica.default($$[$0],$$[$0],Logica.OperadorLogic.NOT,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0])
break;
case 95:
this.$ = new Primitivo.default(new Tipo.default(Tipo.tipos.ENTERO),Number($$[$0]),_$[$0].first_line,_$[$0].first_column);
break;
case 96:
this.$ = new Primitivo.default(new Tipo.default(Tipo.tipos.DECIMAL),Number($$[$0]),_$[$0].first_line,_$[$0].first_column);
break;
case 97:
this.$ = new Primitivo.default(new Tipo.default(Tipo.tipos.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 98:
this.$ = new Primitivo.default(new Tipo.default(Tipo.tipos.BOOLEANO),($$[$0]=='true')?true:false,_$[$0].first_line,_$[$0].first_column);
break;
case 99:
this.$ = new Primitivo.default(new Tipo.default(Tipo.tipos.CARACTER),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 100:
this.$ = $$[$0-1];
break;
case 101:
this.$ = new Identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 102:
this.$ = new Acceso_Vector.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 103:
this.$ = new Acceso_Lista.default($$[$0-5],$$[$0-2],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 105:
this.$ = new MtoLower.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 106:
this.$ = new MtoUpper.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 107:
this.$ = new Mlength.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 108:
this.$ = new Mtruncate.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 109:
this.$ = new Mround.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 110:
this.$ = new Mtypeof.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 111:
this.$ = new MtoString.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 112:
this.$ = new casting.default($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,8:14,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V2,28:$V3,29:27,30:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,42:$Vb,45:$Vc,46:$Vd,47:$Ve,55:$Vf,59:$Vg,63:$Vh,64:$Vi,65:$Vj,71:$Vk},{1:[3]},{2:$V0,5:[1,45],6:46,7:$V1,8:14,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V2,28:$V3,29:27,30:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,42:$Vb,45:$Vc,46:$Vd,47:$Ve,55:$Vf,59:$Vg,63:$Vh,64:$Vi,65:$Vj,71:$Vk},o($Vl,[2,3]),{8:47,30:[1,48]},o($Vl,[2,5]),o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),o($Vl,[2,10]),o($Vl,[2,11]),o($Vl,[2,12]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),o($Vl,[2,19]),o($Vl,[2,20]),o($Vl,[2,21]),o($Vl,[2,22]),o($Vl,[2,23]),o($Vl,[2,24]),o($Vl,[2,25]),o($Vl,[2,26]),{30:[1,49],67:[1,50]},{31:[1,51],40:$Vm,56:$Vn,57:$Vo,67:[1,53],75:[1,54]},{40:[1,57]},{40:[1,58]},{40:[1,59]},{43:60,48:$Vp},{40:[1,62]},{40:[1,63]},{30:[1,64]},{33:[1,65]},{33:[1,66]},{30:$Vq,32:68,33:[1,67],40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{72:[1,87]},o($VH,[2,30]),o($VH,[2,31]),o($VH,[2,32]),o($VH,[2,33]),o($VH,[2,34]),{1:[2,1]},o($Vl,[2,2]),o($Vl,[2,4]),{40:$Vm},{31:$VI,33:$VJ,40:[1,90]},{68:[1,91]},{30:$Vq,32:92,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:95,40:$Vr,41:[1,94],57:$Vs,61:78,62:93,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:96,40:$Vr,57:$Vs,61:78,67:[1,97],72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{76:[1,98]},{56:[1,99]},{57:[1,100]},{30:$Vq,32:101,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:102,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:103,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{45:[1,104]},{2:$V0,4:105,6:3,7:$V1,8:14,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V2,28:$V3,29:27,30:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,42:$Vb,45:$Vc,46:$Vd,47:$Ve,55:$Vf,59:$Vg,63:$Vh,64:$Vi,65:$Vj,71:$Vk},{30:$Vq,32:106,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{9:107,29:108,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{40:[1,109]},o($Vl,[2,63]),o($Vl,[2,64]),o($Vl,[2,65]),{31:$VK,33:[1,110],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{30:$Vq,32:124,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:125,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},o($VX,[2,95]),o($VX,[2,96]),o($VX,[2,97]),o($VX,[2,98]),o($VX,[2,99]),{30:$Vq,32:126,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},o($VX,[2,101],{40:[1,128],67:[1,127]}),o($VX,[2,104]),{40:[1,129]},{40:[1,130]},{40:[1,131]},{40:[1,132]},{40:[1,133]},{40:[1,134]},{40:[1,135]},{29:136,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{29:137,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{30:$Vq,32:138,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},o($VY,[2,28]),{29:141,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,41:[1,140],58:139},{30:[1,142]},{31:$VK,33:[1,143],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{41:[1,144],60:$VZ},{33:[1,146]},o($V_,[2,62],{31:$VK,56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW}),{31:$VK,56:$VL,57:$VM,68:[1,147],72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{30:$Vq,32:148,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{40:[1,149]},o($V$,[2,47],{33:[1,150]}),o($V$,[2,48],{33:[1,151]}),{31:$VK,41:[1,152],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{31:$VK,41:[1,153],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{31:$VK,41:[1,154],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{40:[1,155]},{2:$V0,6:46,7:$V1,8:14,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V2,28:$V3,29:27,30:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,42:$Vb,45:$Vc,46:$Vd,47:$Ve,50:[1,156],55:$Vf,59:$Vg,63:$Vh,64:$Vi,65:$Vj,71:$Vk},{31:$VK,41:[1,157],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{30:$Vq,32:158,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:[1,159]},{29:141,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,41:[1,161],58:160},o($Vl,[2,66]),{30:$Vq,32:162,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:163,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:164,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:165,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:166,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:167,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:168,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,31:[1,170],32:169,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,31:[1,172],32:171,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{31:[1,173]},{31:[1,174]},{30:$Vq,32:175,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:176,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},o($VX,[2,85]),o($VX,[2,94]),{31:$VK,41:[1,177],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{30:$Vq,32:178,40:$Vr,57:$Vs,61:78,67:[1,179],72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:95,40:$Vr,41:[1,181],57:$Vs,61:78,62:180,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:182,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:183,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:184,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:185,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:186,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:187,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:188,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{73:[1,189]},{73:[1,190]},{31:$VK,33:[1,191],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{41:[1,192],60:$V01},{43:194,48:$Vp},{30:[1,195]},{31:[1,196]},o($Vl,[2,29]),{33:[1,197]},{30:$Vq,32:198,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},o($Vl,[2,60]),{31:[1,199]},{31:$VK,56:$VL,57:$VM,68:[1,200],72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{30:$Vq,32:201,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},o($V$,[2,49]),o($V$,[2,50]),{33:[1,202]},{43:203,48:$Vp},{43:204,48:$Vp},{30:$Vq,32:205,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},o([2,5,7,27,28,30,34,35,36,37,38,39,42,44,45,46,47,50,52,55,59,63,64,65,66,71],[2,68]),{48:[1,206]},{31:$VK,33:[1,207],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{31:$VI,33:$VJ},{41:[1,208],60:$V01},{43:209,48:$Vp},o($V11,[2,78],{77:$VP,78:$VQ,79:$VR,80:$VS}),o($V11,[2,79],{77:$VP,78:$VQ,79:$VR,80:$VS}),o($V21,[2,80],{79:$VR}),o($V21,[2,81],{79:$VR}),o($VX,[2,82]),o($V21,[2,83],{79:$VR}),{31:$VK,53:[1,210],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},o($V31,[2,86],{56:$VL,57:$VM,77:$VP,78:$VQ,79:$VR,80:$VS}),{30:$Vq,32:211,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},o($V31,[2,87],{56:$VL,57:$VM,77:$VP,78:$VQ,79:$VR,80:$VS}),{30:$Vq,32:212,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:213,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:$Vq,32:214,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},o([33,41,50,53,60,68,81,83,84],[2,92],{31:$VK,56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VU}),o([33,41,50,53,60,68,81,84],[2,93],{31:$VK,56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VU,83:$VV}),o($VX,[2,100]),{31:$VK,56:$VL,57:$VM,68:[1,215],72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{30:$Vq,32:216,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{41:[1,217],60:$VZ},o($VX,[2,58]),{31:$VK,41:[1,218],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{31:$VK,41:[1,219],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{31:$VK,41:[1,220],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{31:$VK,41:[1,221],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{31:$VK,41:[1,222],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{31:$VK,41:[1,223],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{31:$VK,41:[1,224],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{30:$Vq,32:225,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{30:[1,226]},o($VY,[2,27]),{43:227,48:$Vp},{29:228,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9},o($Vl,[2,53]),o($V_,[2,56]),{48:[1,230],69:[1,229]},o($Vl,[2,59]),o($V_,[2,61],{31:$VK,56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW}),{30:$Vq,32:231,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{68:[1,232]},{31:$VK,41:[1,233],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},o($Vl,[2,35]),o($Vl,[2,36],{44:[1,234]}),o($Vl,[2,39]),{31:$VK,41:[1,235],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{49:236,51:237,52:$V41,54:239,66:$V51},{26:241,30:[1,242]},{43:243,48:$Vp},o($Vl,[2,54]),{30:$Vq,32:244,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},o($V31,[2,88],{56:$VL,57:$VM,77:$VP,78:$VQ,79:$VR,80:$VS}),o($V31,[2,89],{56:$VL,57:$VM,77:$VP,78:$VQ,79:$VR,80:$VS}),o($V61,[2,90],{56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),o($V61,[2,91],{56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),o($VX,[2,102]),{31:$VK,56:$VL,57:$VM,68:[1,245],72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},o($VX,[2,57]),o($VX,[2,105]),o($VX,[2,106]),o($VX,[2,107]),o($VX,[2,108]),o($VX,[2,109]),o($VX,[2,110]),o($VX,[2,111]),o($V31,[2,112],{56:$VL,57:$VM,77:$VP,78:$VQ,79:$VR,80:$VS}),{31:[1,246]},o($Vl,[2,51]),{30:[1,247]},{29:248,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{30:$Vq,32:250,40:$Vr,57:$Vs,61:78,70:249,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{31:$VK,33:[1,251],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{31:[1,252]},{33:[1,253]},{12:255,42:$Vb,43:254,48:$Vp},{33:[1,256]},{50:[1,257],51:258,52:$V41,54:239,66:$V51},o($V71,[2,43]),{30:$Vq,32:259,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{53:[1,260]},{53:[2,67]},{41:[1,261]},{56:$Vn,57:$Vo},o($Vl,[2,52]),o([33,41,50,53,60,68,81],[2,84],{31:$VK,56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,82:$VU,83:$VV,84:$VW}),{68:[1,262]},{69:[1,263],74:[1,264]},o($V_,[2,55]),{67:[1,265]},{50:[1,266],60:[1,267]},o($V81,[2,72],{31:$VK,56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW}),o($Vl,[2,73]),{30:$Vq,32:268,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},o($Vl,[2,76]),o($Vl,[2,37]),o($Vl,[2,38]),o($Vl,[2,40]),o($Vl,[2,41]),o($V71,[2,42]),{31:$VK,53:[1,269],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{2:$V0,4:270,6:3,7:$V1,8:14,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V2,28:$V3,29:27,30:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,42:$Vb,45:$Vc,46:$Vd,47:$Ve,55:$Vf,59:$Vg,63:$Vh,64:$Vi,65:$Vj,71:$Vk},{43:271,48:$Vp},o($VX,[2,103]),{71:[1,272]},{40:[1,273]},{30:$Vq,32:274,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{33:[1,275]},{30:$Vq,32:276,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{31:$VK,33:[1,277],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{2:$V0,4:278,6:3,7:$V1,8:14,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V2,28:$V3,29:27,30:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,42:$Vb,45:$Vc,46:$Vd,47:$Ve,55:$Vf,59:$Vg,63:$Vh,64:$Vi,65:$Vj,71:$Vk},o($V71,[2,45],{9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,8:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,29:27,6:46,2:$V0,7:$V1,27:$V2,28:$V3,30:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,42:$Vb,45:$Vc,46:$Vd,47:$Ve,55:$Vf,59:$Vg,63:$Vh,64:$Vi,65:$Vj,71:$Vk}),o($Vl,[2,46]),{72:[1,279]},{30:$Vq,32:280,40:$Vr,57:$Vs,61:78,72:$Vt,82:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG},{31:$VK,56:$VL,57:$VM,68:[1,281],72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},o($Vl,[2,70]),o($V81,[2,71],{31:$VK,56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW}),o($Vl,[2,77]),o($V71,[2,44],{9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,8:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,29:27,6:46,2:$V0,7:$V1,27:$V2,28:$V3,30:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,42:$Vb,45:$Vc,46:$Vd,47:$Ve,55:$Vf,59:$Vg,63:$Vh,64:$Vi,65:$Vj,71:$Vk}),{29:282,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{31:$VK,41:[1,283],56:$VL,57:$VM,72:$VN,73:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW},{33:[1,284]},{73:[1,285]},{33:[1,286]},o($Vl,[2,69]),{33:[1,287]},o($Vl,[2,75]),o($Vl,[2,74])],
defaultActions: {45:[2,1],240:[2,67]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //Errores
    const Excepcion = require('./Excepciones/Excepcion');
    const ExcepcionComent = require('./Excepciones/ExcepcionComent');
    //Arbol
    const Tipo = require('./TablaSimbolos/Tipo');                          
    const Arbol = require('./TablaSimbolos/Arbol');
    //Tipo de datos
    const Primitivo = require('./Expresiones/Primitivo');
    const Aritmetica= require('./Expresiones/Aritmetica');
    const Logica = require('./Expresiones/Logica');
    const Relacional= require('./Expresiones/Relacional');
    const Identificador = require('./Expresiones/Identificador');
    const IncrementoDecremento = require('./Expresiones/IncrementoDecremento');
    const Ternario = require('./Expresiones/Ternario');
    const casting = require('./Expresiones/casting');
    //instrucciones De control
    const Imprimir = require('./Instrucciones/Imprimir');
    const Si = require('./Instrucciones/Si');
    const cicloWhile = require('./Instrucciones/cicloWhile');
    const cicloDoWhile = require('./Instrucciones/cicloDoWhile');
    const varAsignacion = require('./Instrucciones/varAsignacion');
    const varDeclaracion = require('./Instrucciones/varDeclaracion');
    const CSwitch = require('./Instrucciones_de_Control/CSwitch');
    const Por = require('./Instrucciones_de_Control/Por');
    //instruciones Flujo

    //Estructura de datos
    const Vector = require('./Estructura_de_Datos/Vector');
    const Vector2 = require('./Estructura_de_Datos/Vector2');
    const Acceso_Vector = require('./Estructura_de_Datos/Acceso_Vector');
    const Modificacion_Vector = require('./Estructura_de_Datos/Modificacion_Vector');
    //--lISTA
    const Acceso_Lista = require('./Estructura_de_Datos/Listas/Acceso_Lista');
    const Agregar_aLista = require('./Estructura_de_Datos/Listas/Agregar_aLista');
    const Declaracion_Lista = require('./Estructura_de_Datos/Listas/Declaracion_Lista');
    const Modificacion_Lista = require('./Estructura_de_Datos/Listas/Modificacion_Lista');
    const Lista_toChayArray = require('./Estructura_de_Datos/Listas/Lista_toChayArray');
    //Funciones
    const Llamada_Funcion = require('./Funciones/Llamada_Funcion');
    const Declaracion_funcion = require('./Funciones/Declaracion_funcion');
        //-VOID
    const Declaracion_void = require('./Funciones/FVoid/Declaracion_void');
    const Llamada_void = require('./Funciones/FVoid/Llamada_void');
    //Metodos
    const Mlength = require('./Metodos/Mlength');
    const Mround = require('./Metodos/Mround');
    const MtoLower = require('./Metodos/MtoLower');
    const MtoString = require('./Metodos/MtoString');
    const MtoUpper = require('./Metodos/MtoUpper');
    const Mtruncate = require('./Metodos/Mtruncate');
    const Mtypeof = require('./Metodos/Mtypeof');
    //instruciones condiciones
    const Icase = require('./Instrucciones/Icase');
    const Defecto = require('./Instrucciones/Defecto');
    const Retornar = require('./Instrucciones/Retornar');
    const Continuar = require('./Instrucciones/Continuar');
    const Detener = require('./Instrucciones/Detener');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 27; 
break;
case 1:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 28; 
break;
case 2:return 34;
break;
case 3:return 38;
break;
case 4:return 37;
break;
case 5:return 36;
break;
case 6:return 35;
break;
case 7:return 71;
break;
case 8:return 59;   
break;
case 9:return 39;
break;
case 10:return 42;
break;
case 11:return 44
break;
case 12:return 45;
break;
case 13:return 46;
break;
case 14:return 47;
break;
case 15:return 55;
break;
case 16:return 7;
break;
case 17:return 52;
break;
case 18:return 66;   
break;
case 19:return 63;
break;
case 20:return 64; 
break;
case 21:return 65;
break;
case 22:return 69;   
break;
case 23:return 76; 
break;
case 24:return 90;
break;
case 25:return 91;
break;
case 26:return 92;
break;
case 27:return 93;
break;
case 28:return 94;
break;
case 29:return 95;
break;
case 30:return 96;
break;
case 31:return 74;   
break;
case 32:return 33;
break;
case 33:return 53;
break;
case 34:return 60;
break;
case 35:return 75;
break;
case 36:return 81;
break;
case 37:return 56;
break;
case 38:return 57;
break;
case 39:return 77;
break;
case 40:return 78;   
break;
case 41:return 79;
break;
case 42:return 80;
break;
case 43:return 40;
break;
case 44:return 41;
break;
case 45:return 67;
break;
case 46:return 68;
break;
case 47:return 48;
break;
case 48:return 50;
break;
case 49:return 72;
break;
case 50:return 73;
break;
case 51:return 31;
break;
case 52:return 82;
break;
case 53:return 84;
break;
case 54:return 83;
break;
case 55:
break;
case 56:
break;
case 57:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 87;
break;
case 58:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 89;
break;
case 59:return 86;
break;
case 60:return 85;
break;
case 61:return 88;
break;
case 62:return 30;
break;
case 63:return 5;
break;
case 64: $$ = new Excepcion.default("Este es un error lexico: ",yy_.yytext+" patron no reconocido - ",yy_.yylloc.first_line,yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:list\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:for\b)/i,/^(?:exec\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:[ \r\t]+)/i,/^(?:\n+)/i,/^(?:"[^\"]*")/i,/^(?:'[^\"]?')/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:true|false\b)/i,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}